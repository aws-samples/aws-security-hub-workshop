{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Security Hub Workshop master template.  Sets up VPC, core EC2 instances, Lambda functions, turns on GuardDuty, SecurityHub, and Config.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label" : {"default": "Workshop Service Configuration"},
                    "Parameters": ["EnableGuardDuty", "EnableSecurityHub", "EnableConfig", "EnableIAMAA"]
                },
                {
                    "Label" : {"default": "Workshop Parameters"},
                    "Parameters": ["CreatePublicResourcePolicies", "LatestAMZNLinuxAMI", "LatestAMZNLinux2AMI", "LatestWindows2012R2AMI"]
                }
            ],
            "ParameterLabels": {
                "EnableGuardDuty": {"default" : "Automatically enable GuardDuty?"},
                "EnableSecurityHub": {"default" : "Automatically enable SecurityHub?"},
                "EnableConfig": {"default" : "Automatically enable Config?"},
                "EnableIAMAA": {"default" : "Automatically enable IAM Access Analyzer?"},
                "CreatePublicResourcePolicies": {"default": "Create resources with public policies for IAM Access Analyzer detections?"}
            }
        }
    },
    "Parameters": {
        "LatestAMZNLinuxAMI": {
            "Description": "DO NOT CHANGE: The latest AMI ID for Amazon Linux",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2"
        },
        "LatestAMZNLinux2AMI": {
            "Description": "DO NOT CHANGE: The latest AMI ID for Amazon Linux2",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        },
        "LatestWindows2012R2AMI": {
            "Description": "DO NOT CHANGE: The latest AMI ID for Windows 2012R2",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-windows-latest/Windows_Server-2012-R2_RTM-English-64Bit-Base"
        },
        "EnableGuardDuty": {
            "Description": "Choose Yes if GuardDuty is not yet enabled in the account and region this template will be deployed to, otherwise choose No.",
            "Type": "String",
            "AllowedValues": ["Yes-Enable GuardDuty", "No-GuardDuty is already enabled"]
        },
        "EnableSecurityHub": {
            "Description": "Choose Yes if SecurityHub is not yet enabled in the account and region this template will be deployed to, otherwise choose No.",
            "Type": "String",
            "AllowedValues": ["Yes-Enable Security Hub", "No-Security Hub is already enabled"]
        },
        "EnableConfig": {
            "Description": "Choose Yes if Config is not yet enabled in the account and region this template will be deployed to, otherwise choose No.",
            "Type": "String",
            "AllowedValues": ["Yes-Enable Config", "No-Config is already enabled"]
        },
        "EnableIAMAA": {
            "Description": "Choose Yes if IAM Access Analyzer is not yet enabled in the account and region this template will be deployed to, otherwise choose No.",
            "Type": "String",
            "AllowedValues": ["Yes-Enable IAM AA", "No-IAM AA is already enabled"]
        },
        "CreatePublicResourcePolicies": {
            "Description": "Choose Yes if resources with public policies should be created for IAM Access Analyzer detections, otherwise choose No.",
            "Type": "String",
            "AllowedValues": ["Yes-Create public policies", "No-Dont create public policies"]
        }
    },
    "Mappings": {
        "AWSRegionAMIMap": {
            "ap-south-1": {"HVM64": "ami-b46f48db"},
            "eu-west-3": {"HVM64": "ami-cae150b7"},
            "eu-west-2": {"HVM64": "ami-c12dcda6"},
            "eu-west-1": {"HVM64": "ami-9cbe9be5"},
            "ap-northeast-3": {"HVM64": "ami-68c1cf15"},
            "ap-northeast-2": {"HVM64": "ami-efaf0181"},
            "ap-northeast-1": {"HVM64": "ami-28ddc154"},
            "sa-east-1": {"HVM64": "ami-f09dcc9c"},
            "ca-central-1": {"HVM64": "ami-2f39bf4b"},
            "ap-southeast-1": {"HVM64": "ami-64260718"},
            "ap-southeast-2": {"HVM64": "ami-60a26a02"},
            "eu-central-1": {"HVM64": "ami-1b316af0"},
            "us-east-1": {"HVM64": "ami-467ca739"},
            "us-east-2": {"HVM64": "ami-976152f2"},
            "us-west-1": {"HVM64": "ami-46e1f226"},
            "us-west-2": {"HVM64": "ami-6b8cef13"}
            }
    },

    "Conditions": {
        "EnableConfig": {"Fn::Equals": [{"Ref": "EnableConfig"}, "Yes-Enable Config"]},
        "EnableSecurityHub": {"Fn::Equals": [{"Ref": "EnableSecurityHub"}, "Yes-Enable Security Hub"]},
        "NoEnableSecurityHub": {"Fn::Equals": [{"Ref": "EnableSecurityHub"}, "No-Security Hub is already enabled"]},
        "EnableGuardDuty": {"Fn::Equals": [{"Ref": "EnableGuardDuty"}, "Yes-Enable GuardDuty"]},
        "EnableRuleOnly": {"Fn::Equals": [{"Ref": "EnableConfig"}, "No-Config is already enabled"]},
        "EnableSecHubButNotConfig" : {"Fn::And": [{"Condition": "EnableSecurityHub"}, {"Condition": "EnableRuleOnly" }]},
        "EnableSecHubAndConfig" : {"Fn::And": [{"Condition": "EnableSecurityHub"}, {"Condition": "EnableConfig" }]},
        "EnableIAMAA": {"Fn::Equals": [{"Ref": "EnableIAMAA"}, "Yes-Enable IAM AA"]},
        "CreatePublicPolicies" : {"Fn::Equals": [{"Ref": "CreatePublicResourcePolicies"}, "Yes-Create public policies"]}
    },

    "Resources": {
        "KmsNoRotateKey" : {
            "Type" : "AWS::KMS::Key",
            "Properties" : {
                "Description" : "Sample KMS Key to trigger CIS Check",
                "Enabled" : true,
                "EnableKeyRotation" : false,
                "KeyPolicy" : {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Sid": "Enable IAM User Permissions",
                        "Effect": "Allow",
                        "Principal": {"AWS": "*"},
                        "Action": "kms:*",
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "kms:CallerAccount": { "Ref" : "AWS::AccountId" }
                            }
                          }
                    }]
                }
            }  
        },
        "SSMInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ssm.amazonaws.com",
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "S3andSSMAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:DescribeAssociation",
                                        "ssm:GetDeployablePatchSnapshotForInstance",
                                        "ssm:GetDocument",
                                        "ssm:DescribeDocument",
                                        "ssm:GetManifest",
                                        "ssm:GetParameters",
                                        "ssm:GetParameter",
                                        "ssm:ListAssociations",
                                        "ssm:ListInstanceAssociations",
                                        "ssm:PutInventory",
                                        "ssm:PutComplianceItems",
                                        "ssm:PutConfigurePackageResult",
                                        "ssm:UpdateAssociationStatus",
                                        "ssm:UpdateInstanceAssociationStatus",
                                        "ssm:UpdateInstanceInformation"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssmmessages:CreateControlChannel",
                                        "ssmmessages:CreateDataChannel",
                                        "ssmmessages:OpenControlChannel",
                                        "ssmmessages:OpenDataChannel"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2messages:AcknowledgeMessage",
                                        "ec2messages:DeleteMessage",
                                        "ec2messages:FailMessage",
                                        "ec2messages:GetEndpoint",
                                        "ec2messages:GetMessages",
                                        "ec2messages:SendReply"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeInstanceStatus"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ds:CreateComputer",
                                        "ds:DescribeDirectories"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:GetEncryptionConfiguration",
                                        "s3:AbortMultipartUpload",
                                        "s3:ListMultipartUploadParts",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "S3ListBuckets",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListAllMyBuckets"
                                    ],
                                    "Resource": "arn:aws:s3:::*"
                                },
                                {
                                    "Sid": "S3GetObjects",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListBucket",
                                        "s3:GetBucketLocation",
                                        "s3:GetObject"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                "agentbucket-",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "Path": "/"
            }
        },
        "IsolateInstanceLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "LambdaPolicyName",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "logs:CreateLogGroup",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/isolate-ec2-security-group:*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:Describe*",
                                        "ec2:ModifyInstanceAttribute",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:AuthorizeSecurityGroupIngress"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "IsolateInstanceLambdaFunction": {
            "DependsOn": "SecurityTeamSecurityGroup",
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "",
                            [
                                "sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": "security-hub-workshop/lambda/isolate-ec2-security-group.zip"
                },
                "Description": "Function that swaps the security groups on an EC2 instance.",
                "FunctionName": "isolate-ec2-security-group",
                "Runtime": "python3.7",
                "Handler": "isolate-ec2-security-group.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "IsolateInstanceLambdaRole",
                        "Arn"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "Security_SG": {
                            "Ref": "SecurityTeamSecurityGroup"
                        },
                        "Corp_CIDR": "172.33.44.55/32",
                        "Security_Group_Name": "Security Team SG"
                    }
                }
            }
        },
          "SecurityHubToSlackRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/service-role/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                ],
                "Policies": []
            }
        },
        "SecHubSlackLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "",
                            [
                                "sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": "security-hub-workshop/lambda/sechub-to-slack.zip"
                },
                "Description": "Function to take a finding from SecHub and send it to Slack",
                "FunctionName": "sechub-to-slack",
                "Runtime": "nodejs16.x",
                "Handler": "sechub-to-slack.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "SecurityHubToSlackRole",
                        "Arn"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "slackChannel": "",
                        "webHookUrl": ""
                    }
                },
                "MemorySize": 128,
                "Timeout": 10,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "SecurityTeamSecurityGroup": {
            "DependsOn": "VPC",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "Security Team SG",
                "GroupDescription": "Defines a sepecific Security Group for the security team.  Limited inbound access no outbound.",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Security Team SG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "172.33.44.55/32"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "127.0.0.1/32"
                    }
                ]
            }
        },
        "AMIComplianceLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "LambdaPolicyName",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "logs:CreateLogGroup",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/ec2-non-compliant-ami-sechub:*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "securityhub:UpdateFindings",
                                        "securityhub:BatchImportFindings",
                                        "securityhub:GetFindings"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AMIComplianceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "",
                            [
                                "sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": "security-hub-workshop/lambda/ec2-non-compliant-ami-sechub.zip"
                },
                "Description": "Function to raise SecHub findings for non-compliant AMIs",
                "FunctionName": "ec2-non-compliant-ami-sechub",
                "Runtime": "python3.7",
                "Handler": "ec2-non-compliant-ami-sechub.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "AMIComplianceLambdaRole",
                        "Arn"
                    ]
                },
                "MemorySize": 128,
                "Timeout": 30,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "VPC",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": "true",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Pub1",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "IGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "IGW"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": [
                "AttachGateway"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "IGW"
                }
            }
        },
        "PublicSubnetRouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "ExtraInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SecurityGroup for all the right access",
                "GroupName": "WKSHP-InstanceSecurityGroup",
                "VpcId": {"Ref": "VPC"},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 23,
                        "ToPort": 23,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ExtraInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": "t3.micro",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionAMIMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "HVM64"
                    ]
                },
                "SecurityGroupIds": [{"Fn::GetAtt" :[
                                            "ExtraInstanceSecurityGroup",
                                            "GroupId"
                                        ]
                                    }],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WKSHP-InspectorTarget"
                    }
                ],
                "SubnetId": {"Ref": "PublicSubnet"},
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "wget https://inspector-agent.amazonaws.com/linux/latest/install\n",
                                "sudo bash install\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ConfigBucket": {
            "Type": "AWS::S3::Bucket",
            "Condition": "EnableConfig",
            "Properties": {}
        },
        "ConfigTopic": {
            "Type": "AWS::SNS::Topic",
            "Condition": "EnableConfig",
            "Properties": {}
        },
        "DeliveryChannel": {
            "Type": "AWS::Config::DeliveryChannel",
            "Condition": "EnableConfig",
            "Properties": {
                "ConfigSnapshotDeliveryProperties": {
                    "DeliveryFrequency": "Six_Hours"
                },
                "S3BucketName": {
                            "Ref": "ConfigBucket"
                },       
                "SnsTopicARN": {
                    "Ref": "ConfigTopic"
                }
            }
        },
        "ConfigurationRecorderRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "EnableConfig",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSConfigRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "AssumeRole1",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "config.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "s3-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:PutObject",
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:s3:::${ConfigBucket}/*"
                                    },
                                    "Condition": {
                                        "StringLike": {
                                            "s3:x-amz-acl": "bucket-owner-full-control"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:GetBucketAcl",
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:s3:::${ConfigBucket}"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "sns-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "sns:Publish",
                                    "Resource": {
                                        "Ref": "ConfigTopic"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ConfigurationRecorder": {
            "Type": "AWS::Config::ConfigurationRecorder",
            "Condition": "EnableConfig",
            "Properties": {
                "RecordingGroup": {
                    "AllSupported": true,
                    "IncludeGlobalResourceTypes": true
                },
                "RoleARN": {
                            "Fn::GetAtt": [
                                "ConfigurationRecorderRole",
                                "Arn"
                            ]
                }
            }
        },
        "AMIConfigRule":{
            "Type": "AWS::Config::ConfigRule",
            "Condition": "EnableConfig",
            "DependsOn": "ConfigurationRecorder",
            "Properties":{
                "ConfigRuleName": "approved-amis-by-id",
                "Description": "Config Rule to check for approved AMIs in the account",
                "InputParameters": {
                    "amiIds": 
                        {"Fn::Join": [
                            ",",
                                [
                                    {"Ref": "LatestAMZNLinuxAMI"},
                                    {"Ref": "LatestAMZNLinux2AMI"},
                                    {"Ref": "LatestWindows2012R2AMI"}
                                ]
                        ]}
                },
                "Source": {
                    "Owner": "AWS",
                    "SourceIdentifier": "APPROVED_AMIS_BY_ID"
                }
            }
        },
        "AMIConfigRule1":{
            "Type": "AWS::Config::ConfigRule",
            "Condition": "EnableRuleOnly",
            "Properties":{
                "ConfigRuleName": "approved-amis-by-id",
                "Description": "Config Rule to check for approved AMIs in the account",
                "InputParameters": {
                    "amiIds": 
                        {"Fn::Join": [
                            ",",
                                [
                                    {"Ref": "LatestAMZNLinuxAMI"},
                                    {"Ref": "LatestAMZNLinux2AMI"},
                                    {"Ref": "LatestWindows2012R2AMI"}
                                ]
                        ]}
                },
                "Source": {
                    "Owner": "AWS",
                    "SourceIdentifier": "APPROVED_AMIS_BY_ID"
                }
            }
        },
        "EnrichSecHubLambdaRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "ManagedPolicyArns" : [ 
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AWSSecurityHubFullAccess",
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
                 ],
                 "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
            }
          },
          "EnrichEc2Lambda": {
            "DependsOn": "EnrichSecHubLambdaRole",
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "",
                            [
                                "sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": "security-hub-workshop/lambda/enrich-sec-hub-finding.zip"
                },
                "Description": "Enrich Finding with EC2 Instance Tags - Automating Security Workshop.",
                "FunctionName": "enrich-sec-hub-finding",
                "Runtime": "python3.7",
                "Handler": "enrich-sec-hub-finding.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "EnrichSecHubLambdaRole",
                        "Arn"
                    ]
                },
                "MemorySize": 128,
                "Timeout": 30,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "SecHubEnable1": {
            "DependsOn" : "AMIConfigRule1",
            "Condition": "EnableSecHubButNotConfig",
            "Type": "AWS::SecurityHub::Hub"
        },
        "SecHubEnable": {
            "DependsOn" : "ConfigurationRecorder",
            "Condition": "EnableSecHubAndConfig",
            "Type": "AWS::SecurityHub::Hub"
        },
        "GDdetector": {
            "Type": "AWS::GuardDuty::Detector",
            "Condition": "EnableGuardDuty",
            "Properties": {
                "Enable": true,
                "FindingPublishingFrequency": "FIFTEEN_MINUTES"
            }
        },
        "IAMAAEnable": {
            "Condition": "EnableIAMAA",
            "Type": "AWS::AccessAnalyzer::Analyzer",
            "Properties": {
                "Type": "ACCOUNT",
                "ArchiveRules": [
                    {
                        "Filter": [
                            {
                                "Contains": [
                                 "EEOverlordRole",
                                 "EEOrganizations",
                                 "OpsRole"
                                ],
                                "Property": "resource" 
                            }
                        ],
                        "RuleName": "ArchiveEEAccess"
                    }
                ]
            }
        },
        "WkshpIngestionQueue":  {
            "Type" : "AWS::SQS::Queue",
            "DependsOn": "GuardDutyTesterTemplate",
            "Condition": "CreatePublicPolicies",
            "Properties": {
                "QueueName" : "IngestionQueue"
                }
        },
        "WkshpQueuePolicy": {
            "DependsOn": "WkshpIngestionQueue",
            "Condition": "CreatePublicPolicies",
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
                "Queues": [{"Ref": "WkshpIngestionQueue"}],
                "PolicyDocument": {
                    "Statement": [
                        {
                        "Sid": "IngestionQueueAccess",
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": "*"
                        },
                        "Action": "sqs:SendMessage",
                        "Resource": {
                            "Fn::GetAtt": [
                            "WkshpIngestionQueue",
                            "Arn"
                            ]
                        }
                    }   
                    ]
                }
            }
        },
        "GuardDutyTesterTemplate": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL":{
                    "Fn::Join": [
                            "",
                            [
                                "https://sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".s3.",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".amazonaws.com/security-hub-workshop/templates/guardduty-tester-template.json"
                            ]
                        ]
                    },
                "Parameters": {
                    "InstanceSubnetId": {
                        "Ref": "PublicSubnet"
                    },
                    "DeployVPC": {
                        "Ref": "VPC"
                    },
                    "DeployVPCCidr": {
                        "Fn::GetAtt": [
                            "VPC",
                            "CidrBlock"
                        ]
                    }
                }
            }
        },
        "InspectorTemplate": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                            "",
                            [
                                "https://sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".s3.",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".amazonaws.com/security-hub-workshop/templates/inspector-template.json"
                            ]
                        ]
                    }
            }
        },
        "CloudCustodianTemplate": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                            "",
                            [
                                "https://sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".s3.",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".amazonaws.com/security-hub-workshop/templates/cloud-custodian-template.json"
                            ]
                        ]
                    },
                "Parameters": {
                    "InstanceSubnetId": {
                        "Ref": "PublicSubnet"
                    },
                    "DeployVPC": {
                        "Ref": "VPC"
                    }
                }
            }
        },
        "SecretsTemplate": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                            "",
                            [
                                "https://sa-security-specialist-workshops-",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".s3.",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".amazonaws.com/security-hub-workshop/templates/secrets-manager-template.json"
                            ]
                        ]
                    }
            }
        }
    }
}